/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.nus.iss.pos.gui;

import edu.nus.iss.pos.core.Discount;
import edu.nus.iss.pos.core.PeriodDiscount;
import edu.nus.iss.pos.core.services.IDiscountsService;
import edu.nus.iss.pos.dao.repositories.UnitOfWork;
import edu.nus.iss.pos.services.DiscountsService;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Liu Zhenchang
 */
public class DiscountReport extends CustomedFrame {

    private DiscountTableModel model = null;
    
    /**
     * Creates new form DiscountReport
     * @param discountService
     */
    public DiscountReport(IDiscountsService discountService) {
        super();
        List<Discount> discounts = null;
        try {
            discounts = discountService.getAllDiscounts();
        } catch (Exception ex) {
            Logger.getLogger(DiscountReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        model = new DiscountTableModel(discounts);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setTitle("Discount Report");

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    class DiscountTableModel extends AbstractTableModel {
        
        private List<Discount> discounts = null;
        private final String[] columns = {"Discount code", "Description", "Start date", "Period", "Percentage", "Scope"};
        
        public DiscountTableModel(List<Discount> discounts){
            super();
            this.discounts = discounts;
        }
        
        @Override
        public String getColumnName(int column) {
            return columns[column];
        }
        
        @Override
        public int getRowCount() {
            return discounts.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Discount discount = discounts.get(rowIndex);
            boolean isPeriodDiscount = false;
            if(discounts.get(rowIndex) instanceof PeriodDiscount) {
               isPeriodDiscount = true;
            }
            SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
            switch(columnIndex){
                case 0:
                    return discount.getCode();
                case 1:
                    return discount.getDescription();
                case 2:
                    if(isPeriodDiscount)
                        return dateFormatter.format((Date)((PeriodDiscount)discounts.get(rowIndex)).getStartDate());
                    return "Always";
                case 3:
                    if(isPeriodDiscount)
                        return ((PeriodDiscount)discounts.get(rowIndex)).getDiscountPeriod();
                    return "Always";
                case 4:
                    return discount.getPercentage();
                default:
                    if(isPeriodDiscount)
                        return ((PeriodDiscount)discounts.get(rowIndex)).getForMembers() ? "Members only" : "All customers";
                    return "Members only";
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
